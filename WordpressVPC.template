{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Aws Word Press Chef Template",
  "Parameters" : {
   "KeyName": {
         "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
         "Type": "AWS::EC2::KeyPair::KeyName",
         "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
       },
   "InstanceType" : {
          "Description" : "WebServer EC2 instance type",
          "Type" : "String",
          "Default" : "t2.small",
          "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium"],
          "ConstraintDescription" : "must be a valid EC2 instance type."
        },
   "SSHLocation": {
         "Description": "Ip Address of the you work stations",
         "Type": "String",
         "MinLength": "9",
         "MaxLength": "18",
         "Default": "0.0.0.0/0",
         "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
       },
   "DBName" : {
         "Default": "wordpress",
         "Description" : "The WordPress database name",
         "Type": "String",
         "MinLength": "1",
         "MaxLength": "64",
         "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
         "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
       },
   "DBUser" : {
         "NoEcho": "true",
         "Description" : "The WordPress database admin account username",
         "Type": "String",
         "MinLength": "1",
         "MaxLength": "16",
         "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
         "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
       },
   "DBPassword" : {
         "NoEcho": "true",
         "Description" : "The WordPress database admin account password",
         "Type": "String",
         "ConstraintDescription" : "must contain only alphanumeric characters."
       },
   "DBRootPassword" : {
         "NoEcho": "true",
         "Description" : "MySQL root password",
         "Type": "String",
         "ConstraintDescription" : "must contain only alphanumeric characters."
       }
     },
   "Mappings" : {
        "AWSInstanceType2Arch" : {
          "t1.micro"    : { "Arch" : "PV64"   },
          "t2.micro"    : { "Arch" : "HVM64"  },
          "t2.small"    : { "Arch" : "HVM64"  },
          "t2.medium"   : { "Arch" : "HVM64"  }
        },
        "AWSInstanceType2NATArch" : {
         "t1.micro"    : { "Arch" : "NATPV64"   },
         "t2.micro"    : { "Arch" : "NATHVM64"  },
         "t2.small"    : { "Arch" : "NATHVM64"  },
         "t2.medium"   : { "Arch" : "NATHVM64"  }
        },
        "AWSRegionArch2AMI" : {
         "us-east-1"        : {"PV64" : "ami-5fb8c835", "HVM64" : "ami-49c9295f", "HVMG2" : "ami-e998ea83"}
        }

  },

  "Resources" : {
    "VPC" : {
          "Type" : "AWS::EC2::VPC",
          "Properties" : {
            "CidrBlock" : "10.0.0.0/16",
            "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
          }
        },
    "Subnet" : {
          "Type" : "AWS::EC2::Subnet",
          "DependsOn" : "VPC",
          "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "CidrBlock" : "10.0.0.0/24",
            "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
          }
        },
    "IGW" : {
             "Type" : "AWS::EC2::InternetGateway",
             "Properties" : {
                "Tags" : [ {"Key" : "Owner", "Value" : "arun.sanna"}]
             }
          },
     "IGWAttachment" : {
     	     "Type" : "AWS::EC2::VPCGatewayAttachment",
     	     "DependsOn" : "IGW",
     	     "Properties" : {
     			"VpcId" : { "Ref" : "VPC" },
     			"InternetGatewayId" : { "Ref" : "IGW" }
     	     }
     	  },
    "RouteTable" : {
             "Type" : "AWS::EC2::RouteTable",
             "DependsOn" : "IGW",
             "Properties" : {
                   "VpcId" : { "Ref": "VPC" }
             }
     },
    "Route" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "IGW",
              "Properties" : {
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref": "IGW" },
                "RouteTableId" : { "Ref": "RouteTable" }
            }
     },
    "RouteTableAssoc" : {
             "Type" : "AWS::EC2::SubnetRouteTableAssociation",
             "DependsOn" : "Subnet",
             "Properties" : {
               "SubnetId" : { "Ref" : "Subnet" },
               "RouteTableId" : { "Ref" : "RouteTable" }
             }
     },
    "WebServerSecurityGroup" : {
          "Type" : "AWS::EC2::SecurityGroup",
          "Properties" : {
            "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
            "VpcId" : { "Ref" : "VPC" },
            "SecurityGroupIngress" : [
              {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "10.0.0.0/16"},
              {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
              {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "SSHLocation"}}
            ]
          }
        },
    "WebServer": {
          "Type" : "AWS::EC2::Instance",
          "Properties": {
                  "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                    { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                  "InstanceType"   : { "Ref" : "InstanceType" },
                  "NetworkInterfaces": [ {
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [{ "Ref" : "WebServerSecurityGroup" }],
                        "SubnetId": { "Ref" : "Subnet" }
                        } ],
                   "KeyName" : { "Ref": "KeyName" },
                   "UserData": {
                             "Fn::Base64": {
                               "Fn::Join": [
                                 "",
                                 [
                                   "#!/bin/bash\n",
                                   "\n",
                                   "set -e\n",
                                   "\n",
                                   "apt-get -y update\n",
                                   "\n",
                                   "# Install general dependencies that are needed before Chef is bootstrapped\n",
                                   "apt-get -y install git jq\n",
                                   "\n",
                                   "# Install chef-dk\n",
                                   "curl -LO https://omnitruck.chef.io/install.sh && sudo bash ./install.sh -v 0.14.25 -P chefdk && rm install.sh\n",
                                   "\n",
                                   "mkdir -p /etc/chef/\n",
                                   "\n",
                                   "cat <<EOF > /etc/chef/client.rb\n",
                                   "log_level       :info\n",
                                   "log_location    \"/var/log/chef-client.log\"\n",
                                   "chef_repo_path  \"/etc/chef/\"\n",
                                   "cookbook_path   \"/etc/chef/cookbooks/\"\n",
                                   "local_mode      true\n",
                                   "json_attribs    \"/etc/chef/json_attributes.json\"\n",
                                   "EOF\n",
                                   "\n",
                                   "cat <<EOF > /etc/chef/json_attributes.json\n",
                                   "{\n",
                                   "  \"run_list\": [\n",
                                   "    \"wordpress::default\"\n",
                                   "  ]\n",
                                   "}\n",
                                   "EOF\n",
                                   "\n",
                                   "mkdir /etc/chef/cookbooks/\n",
                                   "cd /etc/chef/cookbooks/\n",
                                   "git clone https://github.com/brint/wordpress-cookbook.git >> /tmp/user.txt\n",
                                   "cd /etc/chef/cookbooks/wordpress-cookbook\n",
                                   "/usr/bin/berks vendor /etc/chef/cookbooks/ > /tmp/berks.txt\n",
                                   "cd /etc/chef/\n",
                                   "chef-client\n",
                                   "chmod -R 755 /var/www/wordpress/ >> /tmp/user.txt\n",
                                   "sed -i 's/ServerName/ServerName localhost/g' /etc/apache2/sites-enabled/wordpress.conf\n",
                                   "service apache2 restart\n",
                                   "\n"
                                  ]
                               ]
                             }
                           },
                  "Tags" : [
                    { "Key" : "Owner",
                      "Value" : "Prudhvi.Atluri"
                     },
                     { "Key" : "Environment",
                       "Value" : "Application-test"
                      },
                     {"Key" : "ExpirationDate",
                      "Value" : "03-30-2017" }
                    ]
                  }
          }
    }
  }
